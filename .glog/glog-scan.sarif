{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-e90a63d6-d990-4049-8525-09c656581dc6",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Non-literal $EXEC() calls detected, potential for command injection vulnerability\" warning refers to a security vulnerability in JavaScript where an attacker can inject arbitrary commands into the `exec()` function. This function is used to execute shell commands from a Node.js application. If the command string passed to `exec()` includes user input, an attacker can execute arbitrary commands on the system running the Node.js application.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using the `exec()` function with user input. If you must use user input in a shell command, sanitize it first to ensure it does not contain any command sequences. Alternatively, use a safer method to execute shell commands, such as `child_process.execFile()` or `child_process.spawn()`, which do not allow command injection.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `child_process.execFile()`:\n\n```javascript\nconst { execFile } = require('child_process');\n\nexecFile(cmd, function(error, stdout, stderr) {\n    callback(stdout);\n});\n```\n\n## Library Dependencies\n\nThe code example requires the `child_process` module, which is built into Node.js and does not need to be installed separately.\n\n## References\n\n- [OWASP Command Injection](https://owasp.org/www-community/attacks/Command_Injection)\n- [CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')](https://cwe.mitre.org/data/definitions/78.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detect-child-process"
                ]
              }
            },
            {
              "id": "glog-84a49334-69dd-4e27-aa3c-77a04005d2f2",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the context of JavaScript, directly writing to the response object can lead to XSS vulnerabilities. This is because the response object may contain user-supplied input, which if not properly sanitized, can lead to the execution of malicious scripts. The specific sink in question is `response.send(phpResult);`.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n- Always validate and sanitize user-supplied input.\n- Use appropriate response headers to prevent XSS, such as `Content-Security-Policy`.\n- Use encoding libraries to encode user-supplied input before including it in a response.\n- Use secure coding practices and frameworks that automatically escape XSS.\n\n## Source Code Fix Recommendation\n\nInstead of directly sending the `phpResult` to the response, you should sanitize it first. Here's an example using the `escape-html` library:\n\n```javascript\nvar escape = require('escape-html');\nresponse.send(escape(phpResult));\n```\n\n## Library Dependencies\n\nThe code example requires the `escape-html` library. You can install it using npm:\n\n```\nnpm install escape-html\n```\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-654d9fb4-756d-4615-b8f5-c71d5ddf5acd",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"NoSQL Injection Vulnerability in findOne() Function Due to Untrusted User Input\" is a security vulnerability that occurs when an application uses untrusted user input in a NoSQL query. In this case, the `findOne()` function is used to query a MongoDB collection. If an attacker can control the `username` parameter, they can manipulate the query to return arbitrary documents from the collection, or even execute arbitrary commands on the database.\n\nThis vulnerability is a type of injection attack, specifically a NoSQL injection attack. Injection attacks occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing unauthorized data.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always validate and sanitize user input before using it in a query. This can prevent an attacker from being able to manipulate the query. Additionally, you should use parameterized queries or prepared statements, which can ensure that user input is always treated as data, not as part of the query.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix using the `escape-string-regexp` package to sanitize the user input:\n\n```javascript\nvar escapeStringRegexp = require('escape-string-regexp');\n\nvar username = escapeStringRegexp(req.body.username);\nvar user = await collection.findOne({ \"username\": username });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- A MongoDB driver, such as the `mongodb` package, to interact with the MongoDB database.\n- The `express` package, to handle HTTP requests and responses.\n- The `body-parser` package, to parse the request body.\n- The `escape-string-regexp` package, to sanitize user input.\n\n## References\n\n- [OWASP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n- [OWASP Node.js Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html)\n- [CWE-943: Improper Neutralization of Special Elements in Data Query Logic](https://cwe.mitre.org/data/definitions/943.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_nosqli_injection"
                ]
              }
            },
            {
              "id": "glog-e181dac7-2db5-42d4-bc68-4b91eaa55bd9",
              "help": {
                "text": "",
                "markdown": "## Description\n\nA potential Cross-Site Scripting (XSS) vulnerability from user-controlled data in HTML string exists when an application includes untrusted data in a new HTML string used in a JavaScript context. This vulnerability can allow an attacker to inject malicious scripts into web pages viewed by other users, leading to a variety of attacks such as stealing user data, performing actions on behalf of the user, or exploiting the user's system.\n\nIn the provided code snippet, the variables `realFileName`, `arg1`, and `arg2` are concatenated into a command string without any form of sanitization or encoding. If these variables contain user-controlled data, this could lead to a potential XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n1. Avoid using user-controlled data in HTML strings or JavaScript contexts where possible.\n2. If user-controlled data must be used, ensure it is properly sanitized or encoded to prevent the execution of malicious scripts.\n3. Use context-specific output encoding libraries to encode user-controlled data before including it in HTML or JavaScript.\n4. Use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities.\n\n## Source Code Fix Recommendation\n\nThe provided code snippet appears to be a command line string rather than a HTML string. If `realFileName`, `arg1`, and `arg2` are user-controlled, this could lead to command injection vulnerabilities rather than XSS. To mitigate this, use safe APIs that perform argument escaping, or manually escape arguments.\n\n```javascript\nlet cmd = `${this.phpPath} ${escape(realFileName)} ${escape(arg1)} ${escape(arg2)}`;\n```\n\nNote: The `escape` function used here is a placeholder. Replace it with a proper escaping function suitable for your context.\n\n## Library Dependencies\n\nThe provided code snippet does not appear to have any library dependencies.\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Command Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')](https://cwe.mitre.org/data/definitions/78.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-025b05fa-6f5a-417c-b407-b27c5ca0cff1",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Direct Writing to Response Object Detected: Potential XSS Vulnerability\" is a security vulnerability in JavaScript programming language that occurs when user input is directly written to the response object without proper sanitization or encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\nIn the provided code snippet, the error message `err` is directly written to the response object `res` without any sanitization or encoding. If `err` contains user input, this could lead to an XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always sanitize and/or encode user input before writing it to the response object. Sanitization removes or escapes any potentially harmful characters in the user input, while encoding converts the user input into a safe format that can be included in the response.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code snippet using the `escape-html` library to encode the error message:\n\n```javascript\nvar escape = require('escape-html');\n\nres.send(\n  (err === null) ? { msg: '' } : { msg: escape(err) }\n);\n```\n\n## Library Dependencies\n\nThe fixed code snippet requires the `escape-html` library. You can install it using npm:\n\n```\nnpm install escape-html\n```\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-37a5fae5-4685-44f0-8042-e7fd10d38710",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the context of JavaScript programming, directly writing to the response object can lead to XSS vulnerabilities if user input is not properly sanitized. In the provided code snippet, the response object `res` is directly written to with a static message. However, if this message were to be replaced with user input, it could potentially lead to an XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n- Always validate and sanitize user input: This can prevent potentially harmful code from being injected into the response.\n- Use appropriate response headers: By setting the `Content-Type` and `X-Content-Type-Options` headers, you can prevent the browser from interpreting the content as something other than declared by the content type.\n- Use encoding libraries: Libraries like OWASP's ESAPI for JavaScript provide methods for encoding user-supplied input and can help prevent XSS attacks.\n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, the message is static and does not pose an XSS risk. However, if the message were to be replaced with user input, it should be properly sanitized. Here is an example of how to sanitize user input using the `escape-html` library:\n\n```javascript\nconst escapeHtml = require('escape-html');\n\nlet userInput = /* get user input */;\nres.send({ msg: escapeHtml(userInput) });\n```\n\n## Library Dependencies\n\nThe provided code snippet seems to be using Express.js, a web application framework for Node.js. Therefore, the `express` package is required. If user input is to be sanitized as recommended, the `escape-html` package would also be required.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-4a9b6385-0ebd-42a1-aaab-f6a51a56623f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-e4b813be-42d7-4642-805d-113d8f17627d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-7fe55173-14a6-46b1-adae-6caa2547d093",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Direct Writing to Response Object May Lead to XSS Vulnerability\" is a common security vulnerability in JavaScript programming language. It occurs when user-supplied data is directly written to the response object without proper sanitization or encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the web application.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always sanitize and/or encode user-supplied data before writing it to the response object. This can be done using various methods, such as HTML encoding, JavaScript encoding, or using a safe API that automatically performs these operations.\n\n## Source Code Fix Recommendation\n\nIn the provided code example, the error message `err` is directly concatenated to a string and sent in the response object. This can lead to XSS if `err` contains malicious scripts. To fix this, you can use the `escape-html` library to encode the error message:\n\n```javascript\nvar escape = require('escape-html');\n\nres.send((err === null) ? { msg: '' } : { msg: 'error: ' + escape(err) });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `express`: A web application framework for Node.js.\n- `escape-html`: A library to escape HTML entities.\n\n## OWASP Resources\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-6c372fc1-eb2e-4079-9c2e-e20a93422cd5",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability arises when the `findOne()` function in a NoSQL database, such as MongoDB, is used with untrusted user input. This can lead to NoSQL injection attacks where an attacker can manipulate the query, potentially gaining unauthorized access to sensitive data. In the provided code, both the `username` and `password` are directly taken from user input without any sanitization or validation, making it vulnerable to such attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n1. Validate and sanitize user input: Ensure that the user input matches the expected format. For example, if a username is expected to be alphanumeric, reject any input that contains special characters.\n\n2. Use parameterized queries or prepared statements: These can help ensure that user input is treated as literal values and not part of the query itself.\n\n3. Limit database permissions: Ensure that the database user used by the application has only the permissions necessary to perform its tasks. This can limit the potential damage of an injection attack.\n\n## Source Code Fix Recommendation\n\nHere is a simple fix using the `escape-string-regexp` package to sanitize the user input:\n\n```javascript\nvar escapeStringRegexp = require('escape-string-regexp');\n\nvar username = escapeStringRegexp(req.body.username);\nvar password = escapeStringRegexp(req.body.password);\n\nvar user = await collection.findOne({ username: username, password: password });\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- A NoSQL database driver, such as `mongodb` for MongoDB databases.\n- An HTTP server library, such as `express` for handling HTTP requests.\n- The `escape-string-regexp` package for sanitizing user input.\n\n## References\n\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html) (While this CWE is specifically for SQL Injection, the principles are similar for NoSQL Injection)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.node_nosqli_injection"
                ]
              }
            },
            {
              "id": "glog-122e83ac-a275-4f8a-8902-6d046b718707",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-bed42cd4-33e3-4cff-b092-59ffa9bea2e3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Direct Writing to Response Object Detected: Potential XSS Vulnerability\" is a security vulnerability in JavaScript programming language that occurs when user input is directly written to the response object without proper sanitization or encoding. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\nIn the provided code snippet, the error message `err` is directly written to the response object `res` without any sanitization or encoding. If `err` contains user input, this could lead to an XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always sanitize and/or encode user input before writing it to the response object. Sanitization removes or escapes any potentially harmful characters in the user input, while encoding converts the user input into a safe format that can be included in the response.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code snippet using the `escape-html` library to encode the error message:\n\n```javascript\nvar escape = require('escape-html');\n\nres.send(\n  (err === null) ? { msg: '' } : { msg: escape(err) }\n);\n```\n\n## Library Dependencies\n\nThe fixed code snippet requires the `escape-html` library. You can install it using npm:\n\n```\nnpm install escape-html\n```\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            },
            {
              "id": "glog-8c3afe0b-5210-47e0-9839-80d929a80ac3",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when data enters a program from an untrusted source and is used to generate dynamic HTML content. The potential XSS vulnerability from user-controlled data in an HTML string arises when an application includes untrusted data in a new browser content without proper validation or escaping. This allows attackers to inject malicious scripts into web pages viewed by other users, leading to a variety of attacks such as stealing user sessions, defacing websites, or redirecting the user to malicious sites.\n\nIn the provided JavaScript code, the user-controlled data `req.session.user.username` is directly included in a string that is logged to the console. If this string is used in an HTML context, it could lead to a potential XSS vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n1. **Validate Input**: Ensure that all user-supplied input is validated before it is processed. This can help to prevent malicious data from being injected into the application.\n\n2. **Escape Untrusted HTTP Request Data**: All user-controlled data should be HTML entity encoded before being included in HTML output to prevent XSS attacks.\n\n3. **Use Secure Libraries**: Use libraries that automatically escape user input, such as ReactJS for frontend JavaScript.\n\n## Source Code Fix\n\nThe following code snippet demonstrates how to mitigate this vulnerability by escaping the user-controlled data:\n\n```javascript\nlet username = escapeHTML(req.session.user.username);\nconsole.log(`Session.login success: ${username}`);\n```\n\nIn this code, `escapeHTML` is a function that replaces special characters with their HTML entities. This function is not built into JavaScript and must be implemented manually or imported from a library.\n\n## Library Dependencies\n\nThe provided code snippet does not explicitly require any library dependencies to execute. However, to implement the `escapeHTML` function, you might need a library such as [he](https://www.npmjs.com/package/he) for HTML entity encoding.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-51227778-d79b-4096-aadc-8e4ccc0387ac",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided JavaScript code, the potential XSS vulnerability arises from the fact that user-controlled data (`req.session.user.username`) is directly included in a string that is logged to the console. If this string were to be rendered in a browser environment, it could lead to an XSS attack.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always escape user-controlled data before including it in HTML or JavaScript code. This can be done using built-in JavaScript functions or third-party libraries designed for this purpose.\n\n## Source Code Fix Recommendation\n\n```javascript\nconsole.log(\n  `Session.login destroy: ${escape(req.session.user.username)}`\n);\n```\n\nIn this fixed code, the `escape` function is used to ensure that any special characters in the username are properly escaped. This prevents them from being interpreted as part of the HTML or JavaScript code.\n\n## Library Dependencies\n\nThe provided code does not appear to have any library dependencies. However, if the `escape` function is not available in your environment, you may need to include a library that provides this functionality, such as lodash's `_.escape` function.\n\n## OWASP Resources\n\n- [Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-a2b0e746-fa25-4a05-8eba-12199a795220",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "resources.rules.direct-response-write"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-e90a63d6-d990-4049-8525-09c656581dc6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Non-literal $EXEC() calls detected, potential for command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "execphp.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 3,
                  "endLine": 25,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\texec(cmd, function(error, stdout, stderr) {\n\t\t\tcallback(stdout);\n\t\t});"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c03a131377cffce0dbe697fbf0ad1502b5ae96e5c841c3d5fc6c4c1155bc6ffbda626d7918fb13e5b79d8e4977171bad4b4055f053cc8b947da771af95113a7e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-84a49334-69dd-4e27-aa3c-77a04005d2f2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object May Lead to XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/php.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    response.send(phpResult);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "85be9ed3efe7a60f12e76a5bc4f376063d64a5dc19da1ebcafb4b8ceff9df29c7f46990f320c6df9cd23bad6115d679c7b1bd2b0de764abb56bc58f143195da9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-654d9fb4-756d-4615-b8f5-c71d5ddf5acd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "NoSQL Injection Vulnerability in findOne() Function Due to Untrusted User Input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 21,
                  "endColumn": 73,
                  "snippet": {
                    "text": "  var user = await collection.findOne({ \"username\": req.body.username });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "75c2cd162777308bdc76a01a610c4c31aa0a80160b346dd1d35b638151d50ecd24198f7c69750e1293bde551a73d347c0bdbdb183e76fcecce5585eaf39b3124_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-e181dac7-2db5-42d4-bc68-4b91eaa55bd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "execphp.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "endLine": 22,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        let cmd = this.phpPath + ' ' + realFileName + ' ' + arg1 + ' ' + arg2;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "957206d904aed971b4370ffde407a8f4389df84451cb35fee20c9d9802005350c81ac7a78bc377c2151218998b7fcff342634150078d8ddbbec3efab726396f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-025b05fa-6f5a-417c-b407-b27c5ca0cff1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object Detected: Potential XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 28,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      res.send(\n        (err === null) ? { msg: '' } : { msg: err }\n      );"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-37a5fae5-4685-44f0-8042-e7fd10d38710",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object May Lead to XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    res.send({ msg: \"duplicate username\" });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-4a9b6385-0ebd-42a1-aaab-f6a51a56623f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 7,
                  "endLine": 60,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      res.send({ msg: \"unauthorized\" });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-e4b813be-42d7-4642-805d-113d8f17627d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 7,
                  "endLine": 53,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      res.send({ msg: \"Please fill in all fields\" }).end();"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_4"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-7fe55173-14a6-46b1-adae-6caa2547d093",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object May Lead to XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "endLine": 39,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    res.send((err === null) ? { msg: '' } : { msg: 'error: ' + err });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-6c372fc1-eb2e-4079-9c2e-e20a93422cd5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "NoSQL Injection Vulnerability in findOne() Function Due to Untrusted User Input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 58,
                  "endColumn": 102,
                  "snippet": {
                    "text": "    var user = await collection.findOne({ username: req.body.username, password: req.body.password });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b22d408adba47d8c7e3a26849ee91cd8ff9e89ad5fb99ee7ccd87d9c935bc66d5020965805eb03cf589c9d5dc866787741378acf0751ba86ad8860bb51001d6b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-122e83ac-a275-4f8a-8902-6d046b718707",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 5,
                  "endLine": 107,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    res.send({ msg: \"login first\" }).end();"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_7"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-bed42cd4-33e3-4cff-b092-59ffa9bea2e3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Direct Writing to Response Object Detected: Potential XSS Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 120,
                  "endColumn": 8,
                  "snippet": {
                    "text": "      res.send(\n        (err === null) ? { msg: '' } : { msg: err }\n      );"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_8"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-8c3afe0b-5210-47e0-9839-80d929a80ac3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential XSS Vulnerability from User-Controlled Data in HTML String"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 11,
                  "endLine": 68,
                  "endColumn": 13,
                  "snippet": {
                    "text": "          console.log(\n            `Session.login success: ${req.session.user.username}`\n          );"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bda9187e5c359f02741b8acb00ca3d78d7265393c25522f1d4d31c501763e74f70c20fba5b0520c7d4c281442f6ea28f08f0c13aadde5f2b7df8a427889a551f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-51227778-d79b-4096-aadc-8e4ccc0387ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    console.log(\n      `Session.login destroy: ${req.session.user.username}`\n    );"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bda9187e5c359f02741b8acb00ca3d78d7265393c25522f1d4d31c501763e74f70c20fba5b0520c7d4c281442f6ea28f08f0c13aadde5f2b7df8a427889a551f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-a2b0e746-fa25-4a05-8eba-12199a795220",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/users.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "endLine": 99,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    res.send({ msg: \"Something bad happens\" });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4d523d91a0c97c0163d0863362dcd6a680bfdb68c5ef50e1804dba6907357fcd34361fd6a141c079d7b38e15f02a1eefc1a508320cf4a5ac119c9db06c206e_6"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}